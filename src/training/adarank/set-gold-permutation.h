/*
 * set-gold-permutation.h
 *
 *  Created on: Apr 27, 2013
 */

#ifndef SET_GOLD_PERMUTATION_H_
#define SET_GOLD_PERMUTATION_H_

#include <iostream>
#include <fstream>
#include <string>
#include <boost/program_options.hpp>
#include <boost/unordered_map.hpp>

#include "TrainingInstance.h"
#include "src/core/util.h"

using namespace std;
namespace po = boost::program_options;


/*
 * loads and parses commandline parameters
 */
bool init_params(int argc, char** argv, po::variables_map* cfg) {
	po::options_description cl("\nApplies Gold Labels to Training Instances...");
	cl.add_options()
			("queries,q", po::value<string>(), "file containing TrainingInstances as queries.")
			("label-dir,y", po::value<string>(), "directory containing the .labels files generated by trec-eval-instances.sh")
			("verbose,v",			po::value<bool>()->zero_tokens(),		"verbose output to STDERR.");

	po::store(parse_command_line(argc, argv, cl), *cfg);
	po::notify(*cfg);

	if(!cfg->count("queries") || !cfg->count("label-dir")) {
		cerr << cl << endl;
		return false;
	}

	if(!DirectoryExists(cfg->at("label-dir").as<string>() )) {
		cerr << "label directory does not exist!\n";
		return false;
	}

	return true;
}

void loadLabels(const string& dirname, boost::unordered_map<string,vector<double> >& labels, const string& label_suffix=".labels") {
	DIR *dp;
	struct dirent *dirp;
	if((dp = opendir(dirname.c_str())) == NULL)
		std::cerr << "Error opening '" << dirname << "'\n";
	while ((dirp = readdir(dp)) != NULL) {
		std::string fname = (dirp->d_name);
		if (fname != "."
			&& fname != ".."
			&& util::endsWith(fname, label_suffix) ) {
			std::stringstream ss;
			ss << dirname << std::string(dirp->d_name);
			ReadFile file(ss.str());
			vector<double> scores;
			double score;
			while(*file >> score)
				scores.push_back(score);
			labels[fname.substr(0,fname.find(".labels"))] = scores;
		}
	}
	closedir(dp);
}


#endif /* SET_GOLD_PERMUTATION_H_ */
